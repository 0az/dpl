#!/usr/bin/env ruby
$: << File.expand_path('../../lib', __FILE__)

require 'ffi-icu'
require 'erb'
require 'dpl'
require 'dpl/helper/wrap'

SKIP = %i(help heroku pages)

CTX = Cl::Ctx.new('dpl')

class Header < Struct.new(:cmd)
  include Wrap

  def to_s
    cmd.status.msg if cmd.status && cmd.status.announce?
  end
end

class Footer < Struct.new(:cmd)
  include Wrap

  def to_s
    # TODO
    return unless env = cmd.instance_variable_get(:@env) || cmd.superclass.instance_variable_get(:@env)
    str = env.description(cmd)
    wrap(str, 100)
  end
end

def providers
  consts = Dpl::Provider.registry.values
  consts = consts.select { |const| const.registry_key && !SKIP.include?(const.registry_key.to_sym) }
  providers = consts.map { |const| [const.registry_key, const.full_name] }.to_h
  providers.sort_by { |_, name| name.downcase }.to_h
end

def help(name)
  Cl::Help.new(CTX, [name.to_s]).help.gsub(/ *$/, '')
end

def header(name)
  Header.new(Cl::Cmd[name]).to_s
end

def footer(name)
  Footer.new(Cl::Cmd[name]).to_s
end

def contributors
  collator = ICU::Collation::Collator.new('en')
  names = `git log --pretty=format:'%an'`.split("\n")
  names = names.map(&:unicode_normalize)
  names = names.sort { |lft, rgt| collator.compare(lft, rgt) }
  names = names.uniq
  names = names - ['Travis CI']
  names.join(', ')
end


erb = ERB.new(File.read('lib/dpl/assets/dpl/README.erb.md'), nil, '-')
puts erb.result
